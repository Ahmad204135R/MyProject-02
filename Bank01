// This code is written by Ahmed Abu-awwad
// The idea of the program is from the course of algorithms and problem solving level 3, Mr. Muhammad Abu Hadhood
// Course link : https://programmingadvices.com/p/08-algorithms-problem-solving-level-4

#include <iostream>
#include <string>
#include <iomanip>
#include <vector>
#include <fstream>

using namespace std;

enum eOptionsMainMenue { eShow = 1, eAdd = 2, eDelete = 3, eUpdate = 4, eFind = 5, eTransactions = 6, Exit = 7 };
enum eOptionsTransactionsMenue {eDiposit=1,eWithdraw=2,eTotalBalances=3,eMainMenue=4};

struct sClient {
	string AccountNumber;
	string PinCode;
	string Name;
	string Phone;
	double AccountBalance;
	bool MarkForDelete = false;
};

void Start();
void StartTransactions(string FileName);
bool FindClientByAccountNumber(sClient& Client, string AccountNumber, string FileName);

vector<string> SplitString(string S1, string Delim="#//#") {

	vector <string> words;
	short pos = 0;
	string sWord;
	while ((pos = S1.find(Delim)) != std::string::npos) {
		sWord = S1.substr(0, pos);
		if (sWord != "") {
			words.push_back(sWord);
		}
		S1.erase(0, pos + Delim.length());
	}
	if (S1 != "") {
		words.push_back(S1);
	}

	return words;

}
string JoinString(vector<string> vString, string Delim="#//#") {
	string S1 = "";
	for (string& s : vString) {
		S1 = S1 + s + Delim;
	}
	return S1.substr(0, S1.length() - Delim.length());
}

sClient ConvertLineToRecord(string Line, string Delim="#//#") {
	sClient Client;
	vector <string> clint = SplitString(Line, Delim);
	Client.AccountNumber = clint[0];
	Client.PinCode = clint[1];
	Client.Name = clint[2];
	Client.Phone = clint[3];
	Client.AccountBalance = stod(clint[4]);

	return Client;
}
string ConvertRecordToLine(sClient Client, string Seperator="#//#") {

	string stClientRecord = "";
	stClientRecord += Client.AccountNumber + Seperator;
	stClientRecord += Client.PinCode + Seperator;
	stClientRecord += Client.Name + Seperator;
	stClientRecord += Client.Phone + Seperator;
	stClientRecord += to_string(Client.AccountBalance);

	return stClientRecord;
}

void EnterAccountNumber(sClient&Client,string FileName) {

	cout << "Enter Account Number? ";
	getline(cin >> ws, Client.AccountNumber);// Usage of std::ws will extract allthe whitespace character
	while (FindClientByAccountNumber(Client, Client.AccountNumber, FileName)) {
	cout << "This account number ("<< Client.AccountNumber <<") already exists. Re-enter it : ";
	getline(cin >> ws, Client.AccountNumber);
}
}
sClient ReadNewClient(string FileName) {
	sClient Client;
	
	EnterAccountNumber(Client, FileName);
	
	cout << "Enter PinCode? ";
	getline(cin, Client.PinCode);

	cout << "Enter Name? ";
	getline(cin, Client.Name);

	cout << "Enter Phone? ";
	getline(cin, Client.Phone);

	cout << "Enter AccountBalance? ";
	cin >> Client.AccountBalance;

	return Client;

}
sClient ReadToUpdateClientData(string AccountNumber) {
	sClient Client;

	Client.AccountNumber = AccountNumber;

	cout << "Enter PinCode? ";
	getline(cin >> ws, Client.PinCode);

	cout << "Enter Name? ";
	getline(cin, Client.Name);

	cout << "Enter Phone? ";
	getline(cin, Client.Phone);

	cout << "Enter AccountBalance? ";
	cin >> Client.AccountBalance;

	return Client;

}
string ReadAccountNumber() {
	string AccountNumber = "";
	cout << "\nPlease enter AccountNumber? ";
	cin >> AccountNumber;
	return AccountNumber;
}

void PrintClientCard(sClient Client) {

	cout << "Enter Account Number: ";
	cout << Client.AccountNumber << endl;

	cout << "Enter PinCode: ";
	cout << Client.PinCode << endl;

	cout << "Enter Name: ";
	cout << Client.Name << endl;

	cout << "Enter Phone: ";
	cout << Client.Phone << endl;

	cout << "Enter AccountBalance: ";
	cout << Client.AccountBalance << endl;

}


void PrintFileContenet(string FileName) {
	fstream MyFile;
	MyFile.open(FileName, ios::in);//read Mode
	if (MyFile.is_open()) {
		string Line;
		while (getline(MyFile, Line)) {
			cout << Line << endl;
		}
		MyFile.close();
	}
}
void LoadDataFromFileToVector(string FileName, vector <string>& vFileContent) {
	fstream MyFile;
	MyFile.open(FileName, ios::in);//read Mode
	if (MyFile.is_open()) {
		string Line;
		while (getline(MyFile, Line)) {
			vFileContent.push_back(Line);
		}
		MyFile.close();
	}
}
void SaveVectorToFile(string FileName, vector <string> vFileContent) {
	fstream MyFile;
	MyFile.open(FileName, ios::out);
	if (MyFile.is_open()) {
		for (string& Line : vFileContent) {
			if (Line != "") {
				MyFile << Line << endl;
			}
		}
		MyFile.close();
	}
}
void SaveVectorToFile(string FileName, vector <sClient> vFileContent) {
	vector <string> vFileContentLine;

	fstream MyFile;
	MyFile.open(FileName, ios::out);
	if (MyFile.is_open()) {
		for (string& Line : vFileContentLine) {
			if (Line != "") {
				MyFile << Line << endl;
			}
		}
		MyFile.close();
	}
}
void DeleteRecordFromFile(string FileName, string Record) {
	vector <string> vFileContent;
	LoadDataFromFileToVector(FileName, vFileContent);
	for (string& Line : vFileContent) {
		if (Line == Record) {
			Line = "";
		}
	}
	SaveVectorToFile(FileName, vFileContent);
}
void UpdateRecordInFile(string FileName, string Record, string UpdateTo) {
	vector <string> vFileContent;
	LoadDataFromFileToVector(FileName, vFileContent);
	for (string& Line : vFileContent) {
		if (Line == Record) {
			Line = UpdateTo;
		}
	}
	SaveVectorToFile(FileName, vFileContent);
}

void AddDataLineToFile(string Line, string FileName) {
	fstream MyFile;
	MyFile.open(FileName, ios::out | ios::app);//Write Mode
	if (MyFile.is_open()) {
		MyFile << Line << endl;
		MyFile.close();
	}
}
void AddNewClient(string FileName) {
	sClient Client = ReadNewClient(FileName);
	AddDataLineToFile(ConvertRecordToLine(Client), FileName);
}
void AddClients(string FileName) {
	char AddMore = 'Y';
	do {

		system("cls");
		cout << "Adding New Client:\n\n";

		AddNewClient(FileName);

		cout << "\nClient Added Successfully, do you want to add more clients? Y/N? ";
		cin >> AddMore;

	} while (toupper(AddMore) == 'Y');
}

void FillClientsDataInVector(string FileName, vector <sClient>& vClients) {
	vector <string> vClientsData;
	sClient Clients;
	LoadDataFromFileToVector(FileName, vClientsData);
	for (string& ClientsData : vClientsData) {
		Clients = ConvertLineToRecord(ClientsData);
		vClients.push_back(Clients);
	}
}
void SaveCleintsDataToFile(string FileName, vector<sClient> vClients) {
	fstream MyFile;
	MyFile.open(FileName, ios::out);//overwrite 
	string DataLine; 
	if (MyFile.is_open()){
		for (sClient C : vClients){
				DataLine = ConvertRecordToLine(C);                 
				MyFile << DataLine << endl;
		}
		MyFile.close();
	} 
}
void PrintHeaderForData(short NumberOfClients) {
	cout << "\t\t\t\t\tClient List (" << NumberOfClients << ") Client(s)." << endl;
	for (short i = 1; i <= 100; i++)cout << "-"; cout << endl;
	cout << "| " << setw(15) << left << "Account Number";
	cout << "| " << setw(10) << left << "Pin Code";
	cout << "| " << setw(40) << left << "Client Name";
	cout << "| " << setw(12) << left << "Phone";
	cout << "| " << setw(12) << left << "Balance" << endl;
	for (short i = 1; i <= 100; i++)cout << "-"; cout << endl;
}
void PrintClientRecord(sClient Client) {
	cout << "| " << setw(15) << Client.AccountNumber;
	cout << "| " << setw(10) << Client.PinCode;
	cout << "| " << setw(40) << Client.Name;
	cout << "| " << setw(12) << Client.Phone;
	cout << "| " << setw(12) << Client.AccountBalance;
	cout << endl;
}
void PrintAllClientsData(string FileName) {
	vector <sClient> Client;
	FillClientsDataInVector(FileName, Client);
	PrintHeaderForData(Client.size());
	for (sClient& C : Client)
		PrintClientRecord(C);
}

bool FindClientByAccountNumber(sClient& Client, string AccountNumber,string FileName) {
	vector <sClient> vClient;
	FillClientsDataInVector(FileName, vClient);
	for (sClient C : vClient)
		if (AccountNumber == C.AccountNumber) {
			Client = C;
			return true;
		}
	return false;
}
void FindClientByAccountNumber(string AccountNumber,string FileName) {
	vector <sClient> vClient;
	bool IsFind = false;
	FillClientsDataInVector(FileName, vClient);
	for (sClient C : vClient)
		if (AccountNumber == C.AccountNumber) {
			IsFind = true;
			PrintClientCard(C);
		}
	if (!IsFind) cout << "Client with Account Number (" << AccountNumber << ") Not Found";
}

void DeleteClientByAccountNumber(string AccountNumber, string FileName) {
	sClient Client;
	string ForDelete = "";
	char sure = 'n';
	if (FindClientByAccountNumber(Client, AccountNumber, FileName)) {
		PrintClientCard(Client);
		ForDelete = ConvertRecordToLine(Client);
		cout << "\nAre you sure you want delete this client y/n ? ";
		cin >> sure;
		if (toupper(sure) == 'Y')
			DeleteRecordFromFile(FileName, ForDelete);
	}
	else
		cout << "\nClient with Account Number (" << AccountNumber << ") is Not Found!";
}
void UpdateClientByAccountNumber(string AccountNumber, string FileName) {
	sClient Client;
	string Record = "", UpdateTo = "";
	char sure = 'n';
	if (FindClientByAccountNumber(Client, AccountNumber, FileName)) {
		PrintClientCard(Client);
		Record = ConvertRecordToLine(Client);
		cout << "\nAre you sure you want Update this client y/n ? ";
		cin >> sure;
		if (toupper(sure) == 'Y') {
			UpdateTo = ConvertRecordToLine(ReadToUpdateClientData(AccountNumber));
			UpdateRecordInFile(FileName, Record, UpdateTo);
		}

	}
	else
		cout << "\nClient with Account Number (" << AccountNumber << ") is Not Found!";
}

void PrintHeaderForDataForTotalBalances(short NumberOfClients) {
	cout << "\t\t\t\t\tClient List (" << NumberOfClients << ") Client(s)." << endl;
	for (short i = 1; i <= 100; i++)cout << "-"; cout << endl;
	cout << "| " << setw(15) << left << "Account Number";
	cout << "| " << setw(40) << left << "Client Name";
	cout << "| " << setw(12) << left << "Balance" << endl;
	for (short i = 1; i <= 100; i++)cout << "-"; cout << endl;
}
void PrintClientRecordForTotalBalances(sClient Client) {
	cout << "| " << setw(15) << Client.AccountNumber;
	cout << "| " << setw(40) << Client.Name;
	cout << "| " << setw(12) << Client.AccountBalance;
	cout << endl;
}
void PrintAllClientsDataAndTotalBalances(string FileName) {
	vector <sClient> Client;
	double TotalBalances = 0;
	FillClientsDataInVector(FileName, Client);
	PrintHeaderForDataForTotalBalances(Client.size());
	for (sClient& C : Client) {
		TotalBalances += C.AccountBalance;
		PrintClientRecordForTotalBalances(C);
	}
	for (short i = 1; i <= 100; i++)cout << "-"; cout << endl;
	cout << "\t\t\t\t\tTotal Balances = " << TotalBalances;
		
}

void DepositExecution(string AccountNumber,vector <sClient> &vClient,bool &IsFind,string FileName) {
    IsFind = false;
	double Amount = 0;
	char sure = 'y';
    for (sClient& C : vClient)
		if (AccountNumber == C.AccountNumber) {
			IsFind = true;
			PrintClientCard(C);
			cout << "\nPlease enter deposit amount? ";
			cin >> Amount;
			cout << "\nAre you sure you want perfrom this transaction? y/n ? ";
			cin >> sure;
			if (toupper(sure) == 'Y') {
				C.AccountBalance += Amount;
				SaveCleintsDataToFile(FileName, vClient);
				cout << "New Balance "<< C.AccountBalance;
			}
		}
}
void Deposit(string AccountNumber, string FileName) {
	vector <sClient> vClient;
	bool IsFind;
	FillClientsDataInVector(FileName, vClient);
	DepositExecution(AccountNumber, vClient, IsFind, FileName);
	while (!IsFind) {
		cout << "Client with Account Number [" << AccountNumber << "] Not exist.";
		cout << "Please enter Account Number : ";
		cin >> AccountNumber;
		DepositExecution(AccountNumber, vClient, IsFind, FileName);
	}

	cout << "\nPress any key to go back to Main Menue...";
	system("pause>0");
	StartTransactions(FileName);
}
void WithdrawExecution(string AccountNumber, vector <sClient>& vClient, bool& IsFind,string FileName) {
	IsFind = false;
	double Amount = 0;
	char sure = 'y';
	for (sClient& C : vClient)
		if (AccountNumber == C.AccountNumber) {
			IsFind = true;
			PrintClientCard(C);
			cout << "\nPlease enter Withdraw amount? ";
			cin >> Amount;
			while (Amount > C.AccountBalance) {
				cout << "Amount Exceeds the balance, you can withdraw up to : " << C.AccountBalance;
				cout << "\nPlease enter Withdraw amount? ";
				cin >> Amount;
			}
			cout << "\nAre you sure you want perfrom this transaction? y/n ? ";
			cin >> sure;
			if (toupper(sure) == 'Y') {
				C.AccountBalance -= Amount;
				SaveCleintsDataToFile(FileName, vClient);
				cout << "New Balance " << C.AccountBalance;
			}
		}
}
void Withdraw(string AccountNumber,string FileName) {
	vector <sClient> vClient;
	bool IsFind;
	FillClientsDataInVector(FileName, vClient);
	WithdrawExecution(AccountNumber, vClient, IsFind,FileName);
	while (!IsFind) {
		cout << "Client with Account Number [" << AccountNumber << "] Not exist.";
		cout << "Please enter Account Number : ";
		cin >> AccountNumber;
		WithdrawExecution(AccountNumber, vClient, IsFind,FileName);
	}
	cout << "\nPress any key to go back to Main Menue...";
	system("pause>0");
	StartTransactions(FileName);
}
void TotalBalances(string FileName) {
	system("cls");
	PrintAllClientsDataAndTotalBalances(FileName);
	cout << "\nPress any key to go back to Main Menue...";
	system("pause>0");
	StartTransactions(FileName);
}



eOptionsTransactionsMenue TransactionsMenue() {
	short YourChoosed;
	system("cls");
	cout << "\n============================================\n";
	cout << "\t\tTransactions Menue Screen\n";
	cout << "============================================\n";
	cout << "\t[1] Diposit.\n";
	cout << "\t[2] Withdraw.\n";
	cout << "\t[3] Total Balances.\n";
	cout << "\t[4] Main Menue.\n";
	cout << "============================================\n";
	cout << "Choose what do you want to do ? [1 to 4]? ";
	cin >> YourChoosed;
	return (eOptionsTransactionsMenue)YourChoosed;
}
eOptionsMainMenue MainMenue() {
	short YourChoosed;
	system("cls");
	cout << "\n============================================\n";
	cout << "\t\tMain Menue Screen\n";
	cout << "============================================\n";
	cout << "\t[1] Show Client List.\n";
	cout << "\t[2] Add New Client.\n";
	cout << "\t[3] Delete Client.\n";
	cout << "\t[4] Update Client Info.\n";
	cout << "\t[5] Find Client.\n";
	cout << "\t[6] Transactions.\n";
	cout << "\t[7] Exit.\n";
	cout << "============================================\n";
	cout << "Choose what do you want to do ? [1 to 7]? ";
	cin >> YourChoosed;
	return (eOptionsMainMenue)YourChoosed;
}
void ShowClientList(string FileName) {
	system("cls");
	PrintAllClientsData(FileName);
	cout << "\nPress any key to go back to Main Menue...";
	system("pause>0");
	Start();
}
void AddClientsScreen(string FileName) {
	system("cls");
	cout << "============================================\n";
	cout << "\t\tAdd New Client Screen\n";
	cout << "============================================\n";
	AddClients(FileName);
	cout << "\nPress any key to go back to Main Menue...";
	system("pause>0");
	Start();
}
void DeleteClient(string FileName) {
	system("cls");
	cout << "============================================\n";
	cout << "\t\tDelete Client Screen\n";
	cout << "============================================\n";
	DeleteClientByAccountNumber(ReadAccountNumber(), FileName);
	cout << "\nPress any key to go back to Main Menue...";
	system("pause>0");
	Start();
}
void UpdateClientInfo(string FileName) {
	system("cls");
	cout << "============================================\n";
	cout << "\t\tUpdate Client Info Screen\n";
	cout << "============================================\n";
	UpdateClientByAccountNumber(ReadAccountNumber(), FileName);
	cout << "\nPress any key to go back to Main Menue...";
	system("pause>0");
	Start();
}
void FindClient(string FileName) {
	system("cls");
	cout << "============================================\n";
	cout << "\t\tFind Client Screen\n";
	cout << "============================================\n";
	FindClientByAccountNumber(ReadAccountNumber(), FileName);
	cout << "\nPress any key to go back to Main Menue...";
	system("pause>0");
	Start();
}
void StartTransactions(string FileName) {
	switch (TransactionsMenue()) {
	case eOptionsTransactionsMenue::eDiposit:
		system("cls");
		Deposit(ReadAccountNumber(),FileName);
		break;
	case eOptionsTransactionsMenue::eWithdraw:
		system("cls");
		Withdraw(ReadAccountNumber(),FileName);
		break;
	case eOptionsTransactionsMenue::eTotalBalances:
		TotalBalances(FileName);
		break;
	case eOptionsTransactionsMenue::eMainMenue:
		Start();
		break;
	}
}
void ExitFromProgram() {
	system("cls");
	cout << "============================================\n";
	cout << "\t\tExit Screen\n";
	cout << "============================================\n";
}

void Start() {
	string FileName = "MyFile.txt";
	switch (MainMenue()) {
	case eOptionsMainMenue::eShow:
		ShowClientList(FileName);
		break;
	case eOptionsMainMenue::eAdd:
		AddClientsScreen(FileName);
		break;
    case eOptionsMainMenue::eDelete:
		DeleteClient(FileName);
		break;
	case eOptionsMainMenue::eUpdate:
		UpdateClientInfo(FileName);
		break;
	case eOptionsMainMenue::eFind:
		FindClient(FileName);
		break;
	case eOptionsMainMenue::eTransactions:
		StartTransactions(FileName);
		break;
	case eOptionsMainMenue::Exit:
		ExitFromProgram();
		break;
	}
}

int main()
{
	Start();
	return 0;
}
